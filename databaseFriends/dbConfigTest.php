<?php
/**
 * dbConfigTest.php
 *
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Å –ø–æ–º–æ—â—å—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ dbConfig.php / db_config.php:
 *  1) –ü–æ–¥–∫–ª—é—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥.
 *  2) –û—Ç–∫—Ä—ã–≤–∞–µ—Ç PDO-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
 *  3) –°–æ–∑–¥–∞—ë—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É (–µ—Å–ª–∏ –Ω–µ—Ç) –∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–ø–∏—Å—å.
 *  4) –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –Ω–∏—Ö (–ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ, –±–µ–∑ –ª–∏–º–∏—Ç–∞).
 *
 * –í–ê–ñ–ù–û: —É–¥–∞–ª–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –¥–∞–Ω–Ω—ã–µ –ë–î).
 */

header('Content-Type: text/plain; charset=utf-8');

// ---------- 1) –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ ----------
$cfgIncluded = false;
$cfgErrors = [];

foreach (['dbConfig.php', 'db_config.php'] as $cfgFile) {
    if (is_file(__DIR__ . DIRECTORY_SEPARATOR . $cfgFile)) {
        require_once __DIR__ . DIRECTORY_SEPARATOR . $cfgFile;
        $cfgIncluded = true;
        break;
    } else {
        $cfgErrors[] = "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {$cfgFile}";
    }
}

if (!$cfgIncluded) {
    http_response_code(500);
    echo "–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥.\n";
    echo implode("\n", $cfgErrors), "\n";
    exit(1);
}

// –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥ –∑–∞–¥–∞—ë—Ç –∫–∞–∫ –º–∏–Ω–∏–º—É–º: $DB_HOST, $DB_PORT, $DB_USER, $DB_PASS, $DB_NAME
$DB_HOST = $DB_HOST ?? null;
$DB_PORT = $DB_PORT ?? 3306;
$DB_USER = $DB_USER ?? null;
$DB_PASS = $DB_PASS ?? '';
$DB_NAME = $DB_NAME ?? ($DB_DATABASE ?? null);

// –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º DSN –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º $DB_DSN –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
if (!empty($DB_DSN)) {
    $dsn = $DB_DSN;
} else {
    if (!$DB_HOST || !$DB_USER || !$DB_NAME) {
        http_response_code(500);
        echo "–û–®–ò–ë–ö–ê: –í –∫–æ–Ω—Ñ–∏–≥–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö. –ù—É–∂–Ω—ã: \$DB_HOST, \$DB_USER, \$DB_NAME.\n";
        exit(1);
    }
    $dsn = "mysql:host={$DB_HOST};port={$DB_PORT};dbname={$DB_NAME};charset=utf8mb4";
}

// ---------- 2) –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ PDO ----------
try {
    $pdo = new PDO($dsn, $DB_USER, $DB_PASS, [
        PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION,
        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
        PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8mb4"
    ]);
} catch (Throwable $e) {
    http_response_code(500);
    echo "–û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–î:\n", $e->getMessage(), "\n";
    exit(1);
}

echo "‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n";
echo "–•–æ—Å—Ç: {$DB_HOST}\n–ü–æ—Ä—Ç: {$DB_PORT}\n–ë–î: {$DB_NAME}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {$DB_USER}\n\n";

// ---------- 3) –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å ----------
$testTable = 'zTestConfig';
try {
    $pdo->exec("
        CREATE TABLE IF NOT EXISTS `{$testTable}` (
            `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
            `created_at` DATETIME NOT NULL,
            `rnd` VARCHAR(64) NOT NULL,
            `ip` VARCHAR(45) DEFAULT NULL,
            `ua` VARCHAR(255) DEFAULT NULL,
            PRIMARY KEY (`id`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
    ");

    $rnd = bin2hex(random_bytes(8));
    $ip  = $_SERVER['REMOTE_ADDR'] ?? null;
    $ua  = $_SERVER['HTTP_USER_AGENT'] ?? null;

    $stmt = $pdo->prepare("INSERT INTO `{$testTable}` (`created_at`,`rnd`,`ip`,`ua`) VALUES (NOW(), :rnd, :ip, :ua)");
    $stmt->execute([':rnd' => $rnd, ':ip' => $ip, ':ua' => $ua]);

    $lastId = (int)$pdo->lastInsertId();
    echo "üß™ –í —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É `{$testTable}` –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å. ID={$lastId}, RND={$rnd}\n\n";
} catch (Throwable $e) {
    echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É:\n", $e->getMessage(), "\n\n";
}

// ---------- 4) –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –∏ –¥–∞–Ω–Ω—ã–µ ----------
echo "===== –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü (BASE TABLE) =====\n";

try {
    // –ü–æ–∫–∞–∂–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (–±–µ–∑ VIEW)
    $tables = [];
    $stmt = $pdo->query("SHOW FULL TABLES");
    $rows = $stmt->fetchAll(PDO::FETCH_NUM);

    // –í –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ ‚Äî –∏–º—è —Ç–∞–±–ª–∏—Ü—ã, –≤–æ –≤—Ç–æ—Ä–æ–π ‚Äî —Ç–∏–ø ('BASE TABLE' / 'VIEW')
    foreach ($rows as $r) {
        if (!empty($r[0]) && (!isset($r[1]) || strtoupper($r[1]) === 'BASE TABLE')) {
            $tables[] = $r[0];
        }
    }

    if (!$tables) {
        echo "(–ù–µ—Ç —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ `{$DB_NAME}`)\n";
    } else {
        foreach ($tables as $t) {
            echo "\n--- –¢–∞–±–ª–∏—Ü–∞: {$t} ---\n";

            // –°—Ö–µ–º–∞
            try {
                $createRow = $pdo->query("SHOW CREATE TABLE `{$t}`")->fetch(PDO::FETCH_ASSOC);
                if ($createRow) {
                    $createSQL = $createRow['Create Table'] ?? reset($createRow);
                    echo "[DDL]\n", $createSQL, "\n";
                }
            } catch (Throwable $e) {
                echo "[DDL] –û—à–∏–±–∫–∞: ", $e->getMessage(), "\n";
            }

            // –ö–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫
            try {
                $cnt = (int)$pdo->query("SELECT COUNT(*) AS c FROM `{$t}`")->fetchColumn();
                echo "[ROWS] –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {$cnt}\n";
            } catch (Throwable $e) {
                echo "[ROWS] –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞: ", $e->getMessage(), "\n";
            }

            // –î–∞–Ω–Ω—ã–µ (–≤—ã–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ –ø–æ 1000 —Å—Ç—Ä–æ–∫, —á—Ç–æ–±—ã –Ω–µ —É–ø–∞—Å—Ç—å –ø–æ –ø–∞–º—è—Ç–∏)
            $pageSize = 1000;
            $offset   = 0;
            $page     = 1;

            while (true) {
                try {
                    $dataStmt = $pdo->query("SELECT * FROM `{$t}` LIMIT {$pageSize} OFFSET {$offset}");
                    $batch = $dataStmt->fetchAll();
                } catch (Throwable $e) {
                    echo "[DATA] –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∫–∏: ", $e->getMessage(), "\n";
                    break;
                }

                if (!$batch) {
                    if ($offset === 0) {
                        echo "[DATA] (—Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞)\n";
                    }
                    break;
                }

                echo "[DATA] –°—Ç—Ä–∞–Ω–∏—Ü–∞ {$page} (–∑–∞–ø–∏—Å–µ–π: " . count($batch) . ")\n";
                // –ü–µ—á–∞—Ç–∞–µ–º –∫–∞–∫ JSON –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                echo json_encode($batch, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT), "\n";

                $offset += $pageSize;
                $page++;
            }
        }
    }
} catch (Throwable $e) {
    echo "–û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü/–¥–∞–Ω–Ω—ã—Ö:\n", $e->getMessage(), "\n";
}

echo "\n–ì–æ—Ç–æ–≤–æ.\n";
